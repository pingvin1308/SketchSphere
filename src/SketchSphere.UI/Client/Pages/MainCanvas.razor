@page "/maincanvas"
@using Microsoft.AspNetCore.Components
@using SketchSphere.UI.Render
@using Excubo.Blazor.Canvas.Contexts

<PageTitle>MainCanvas</PageTitle>

<button onclick="@ClearAsync">Cleara</button>
<button @onclick="() => SelectToolAsync(Tool.Selection)">Selection</button>
<button @onclick="() => SelectToolAsync(Tool.Rectangle)">Rectangle</button>
<button @onclick="() => SelectToolAsync(Tool.Diamond)">Diamond</button>
<button @onclick="() => SelectToolAsync(Tool.Ellipse)">Ellipse</button>
<button @onclick="() => SelectToolAsync(Tool.Line)">Line</button>
<button @onclick="() => SelectToolAsync(Tool.Draw)">Draw</button>

<div
    onmousemove="@OnMouseMoveAsync"
    onmousedown="@OnMouseDownAsync"
    onmouseup="@OnMouseUpAsync">
    <Canvas
        Width="@_width"
        Height="@_height"
        @ref="_canvasReference">
    </Canvas>
</div>

@code {
    private int _width = 500;
    private int _height = 500;

    private Context2D _context;
    private Canvas _canvasReference;

    private bool _isMouseDown;
    private bool _isDrawingStated;

    private List<DrawingObject> _drawingObjects = new();
    private Selection _selection = new(0, 0);

    private DrawingObject? _currentDrawingObject;
    private Tool _currentTool;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.GetContext2DAsync();

        if (firstRender)
        {
            await _context.StrokeStyleAsync("#ffffff");
            await _context.LineWidthAsync(5);
            await _context.LineCapAsync(LineCap.Round);
            await _context.LineJoinAsync(LineJoin.Round);

            await ClearCanvasAsync();
        }
    }

    private async Task OnMouseMoveAsync(MouseEventArgs e)
    {
        if (_isMouseDown)
        {
            var x = e.OffsetX;
            var y = e.OffsetY;

            if (_currentDrawingObject != null)
            {
                Action initDrawingObjectAsync = _currentDrawingObject switch
                {
                    Freedraw freedraw => () => { freedraw.AddPointAsync(x, y); },
                    Line line => () => { line.SetEndAsync(x, y); },
                    Rectangle or Ellipse or Diamond =>  () =>
                    {
                        _currentDrawingObject.SetWidth(x);
                        _currentDrawingObject.SetHeight(y);
                    },
                    _ => throw new ArgumentOutOfRangeException(nameof(_currentDrawingObject))
                };
                initDrawingObjectAsync();
            }
            
            if (_selection.IsSelected)
            {
                _selection.Move(e.MovementX, e.MovementY);
            }
        }

        await RenderAsync();
    }

    private async Task RenderAsync()
    {
        await ClearCanvasAsync();

        foreach (var drawingObject in _drawingObjects)
        {
            await drawingObject.DrawAsync(_context);
        }

        if (_selection.IsSelected)
        {
            await _selection.DrawAsync(_context);
        }
    }

    private async Task OnMouseDownAsync(MouseEventArgs e)
    {
        var x = e.OffsetX;
        var y = e.OffsetY;
        _isMouseDown = true;

        if (_currentTool == Tool.Selection)
        {
            await SetSelection(x, y);
            return;
        }

        DrawingObject currentDrawingObject = _currentTool switch
        {
            Tool.Rectangle => new Rectangle(x, y),
            Tool.Diamond => new Diamond(x, y),
            Tool.Ellipse => new Ellipse(x, y),
            Tool.Line => new Line(x, y),
            Tool.Draw => new Freedraw(x, y),
            _ => throw new ArgumentOutOfRangeException(nameof(_currentTool), _currentTool, null)
        };

        _currentDrawingObject = currentDrawingObject;
        _drawingObjects.Add(currentDrawingObject);
    }

    private async Task SetSelection(double x, double y)
    {
        var selectedObject = _drawingObjects
            .FirstOrDefault(obj => obj.IsHit(x, y));

        if (selectedObject != null)
        {
            _selection.Set(selectedObject);
        }
        else
        {
            await ClearSelection();
        }
    }
    
    private async Task ClearSelection()
    {
        if (_selection.IsSelected)
        {
            _selection.Clear();
            await RenderAsync();
        }
    }

    private async Task OnMouseUpAsync(MouseEventArgs e)
    {
        _isMouseDown = false;
        _isDrawingStated = false;
        _currentDrawingObject = null;
    }

    private async Task ClearCanvasAsync()
    {
        await _context.FillStyleAsync("#1e1e1e");
        await _context.FillRectAsync(0, 0, _width, _height);
    }

    private async Task ClearAsync()
    {
        await ClearCanvasAsync();
        _drawingObjects.Clear();
    }

    private async Task SelectToolAsync(Tool selectedTool)
    {
        await ClearSelection();
        _currentTool = selectedTool;
    }

}