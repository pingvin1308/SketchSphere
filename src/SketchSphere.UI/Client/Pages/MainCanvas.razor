@page "/"
@using Microsoft.AspNetCore.Components
@using SketchSphere.UI.Render
@using Excubo.Blazor.Canvas.Contexts
@using SketchSphere.UI.Render.Elements

<PageTitle>MainCanvas</PageTitle>

<button onclick="@ClearAsync">Cleara</button>
<button @onclick="() => SelectToolAsync(Tool.Selection)">Selection</button>
<button @onclick="() => SelectToolAsync(Tool.Rectangle)">Rectangle</button>
<button @onclick="() => SelectToolAsync(Tool.Diamond)">Diamond</button>
<button @onclick="() => SelectToolAsync(Tool.Ellipse)">Ellipse</button>
<button @onclick="() => SelectToolAsync(Tool.Line)">Line</button>
<button @onclick="() => SelectToolAsync(Tool.Draw)">Draw</button>

<div
    onmousemove="@OnMouseMoveAsync"
    onmousedown="@OnMouseDownAsync"
    onmouseup="@OnMouseUpAsync">
    <Canvas
        Width="@_width"
        Height="@_height"
        @ref="_canvasReference">
    </Canvas>
</div>

@code {
    private int _width = 1920;
    private int _height = 1080;

    private Context2D _context;
    private Canvas _canvasReference;

    private bool _isMouseDown;
    private bool _isDrawingStated;

    private List<DrawingObject> _drawingObjects = new();
    private Selection? _selection = null;
    private SelectionBox? _selectionBox = null;

    private DrawingObject? _currentDrawingObject;
    private Tool _currentTool;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.GetContext2DAsync();

        if (firstRender)
        {
            await SetDefaultStyleSettings();
            await ClearCanvasAsync();
        }
    }

    private async Task SetDefaultStyleSettings()
    {
        await _context.StrokeStyleAsync("#ffffff");
        await _context.LineWidthAsync(5);
        await _context.LineCapAsync(LineCap.Round);
        await _context.LineJoinAsync(LineJoin.Round);
    }

    private async Task OnMouseDownAsync(MouseEventArgs e)
    {
        var x = e.OffsetX;
        var y = e.OffsetY;
        _isMouseDown = true;

        if (_currentTool == Tool.Selection)
        {
            if (_selectionBox?.IsSelectedAndFinished == true)
            {
                if (_selectionBox?.IsHit(x, y) != false)
                {
                    return;
                }

                await ClearSelection();
                Console.WriteLine("Clear selection");
            }
            else
            {
                await TryToggleSelection(x, y);
            }

            return;
        }

        DrawingObject currentDrawingObject = _currentTool switch
        {
            Tool.Rectangle => new Rectangle(x, y),
            Tool.Diamond => new Diamond(x, y),
            Tool.Ellipse => new Ellipse(x, y),
            Tool.Line => new Line(x, y),
            Tool.Draw => new Freedraw(x, y),
            _ => throw new ArgumentOutOfRangeException(nameof(_currentTool), _currentTool, null)
        };
        
        _currentDrawingObject = currentDrawingObject;
        _drawingObjects.Add(currentDrawingObject);
    }

    private async Task OnMouseMoveAsync(MouseEventArgs e)
    {
        var x = e.OffsetX;
        var y = e.OffsetY;

        if (_isMouseDown && _currentDrawingObject != null)
        {
            Action initDrawingObjectAsync = _currentDrawingObject switch
            {
                Freedraw freedraw => () => { freedraw.SetEnd(x, y); },
                Rectangle or Ellipse or Diamond or Line => () =>
                {
                    _currentDrawingObject.SetEnd(x, y);
                },
                _ => throw new ArgumentOutOfRangeException(nameof(_currentDrawingObject))
            };
            initDrawingObjectAsync();
        }

        if (_isMouseDown && _currentTool == Tool.Selection)
        {
            if (_selectionBox?.IsSelectedAndFinished == true)
            {
                _selectionBox.Move(e.MovementX, e.MovementY);
            }
            else if (_selection?.IsSelected == true)
            {
                _selection.Move(e.MovementX, e.MovementY);
            }
        }

        await RenderAsync();

        if (_isMouseDown 
            && _currentTool == Tool.Selection
            && (_selection == null || _selection?.IsSelected == false)
            && (_selectionBox == null || _selectionBox?.IsSelectedAndFinished == false))
        {
            _selectionBox ??= new SelectionBox(x, y);
            _selectionBox.SetEnd(x, y);

            await _selectionBox.DrawAsync(_context);
            _selectionBox.AddIntersected(_drawingObjects);
        }
    }

    private async Task OnMouseUpAsync(MouseEventArgs e)
    {
        _isMouseDown = false;
        _isDrawingStated = false;
        _currentDrawingObject = null;

        if (_selectionBox?.IsSelected == true)
        {
            _selectionBox?.FinishDrawing();
        }
        
        if (_selectionBox?.IsSelectedAndFinished == false)
        {
            _selectionBox = null;
        }
    }

    private async Task RenderAsync()
    {
        await ClearCanvasAsync();

        foreach (var drawingObject in _drawingObjects)
        {
            await drawingObject.DrawAsync(_context);
        }

        if (_selection?.IsSelected == true)
        {
            await _selection.DrawAsync(_context);
        }
        else if (_selectionBox?.IsSelectedAndFinished == true)
        {
            await _selectionBox.DrawAsync(_context);
        }
    }

    private async Task TryToggleSelection(double x, double y)
    {
        var selectedObject = _drawingObjects
            .FirstOrDefault(obj => obj.IsHit(x, y));

        if (selectedObject != null)
        {
            _selection = new Selection(x, y);
            _selection.Set(selectedObject);
            return;
        }

        await ClearSelection();
    }

    private async Task ClearSelection()
    {
        if (_selection?.IsSelected == true)
        {
            _selection.Clear();
            _selection = null;
            await RenderAsync();
        }
        
        if (_selectionBox?.IsSelectedAndFinished == true)
        {
            _selectionBox.Clear();
            _selectionBox = null;
            await RenderAsync();
        }
    }

    private async Task ClearCanvasAsync()
    {
        await _context.FillStyleAsync("#1e1e1e");
        await _context.FillRectAsync(0, 0, _width, _height);
    }

    private async Task ClearAsync()
    {
        await ClearCanvasAsync();
        _drawingObjects.Clear();
    }

    private async Task SelectToolAsync(Tool selectedTool)
    {
        await ClearSelection();
        _currentTool = selectedTool;
    }
}