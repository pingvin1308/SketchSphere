@page "/"
@using Microsoft.AspNetCore.Components
@using Excubo.Blazor.Canvas.Contexts
@using SketchSphere.UI.Render.Elements
@inject IClipboardService ClipboardService
@inject IJSRuntime JsInterop;

<PageTitle>MainCanvas</PageTitle>

<button onclick="@ClearAsync">Cleara</button>
<button @onclick="() => SelectToolAsync(Tool.Selection)">Selection</button>
<button @onclick="() => SelectToolAsync(Tool.Rectangle)">Rectangle</button>
<button @onclick="() => SelectToolAsync(Tool.Diamond)">Diamond</button>
<button @onclick="() => SelectToolAsync(Tool.Ellipse)">Ellipse</button>
<button @onclick="() => SelectToolAsync(Tool.Line)">Line</button>
<button @onclick="() => SelectToolAsync(Tool.Draw)">Draw</button>
<button @onclick="() => SelectToolAsync(Tool.Move)">Srul</button>
<button @onclick="() => SelectToolAsync(Tool.Image)">Image</button>
<button @onclick="() => ZoomIn()">zum +</button>
<button @onclick="() => ZoomOut()">zum -</button>
<button @onclick="() => ResetZoom()">Reset</button>

<div
    onmousemove="@OnMouseMoveAsync"
    onmousedown="@OnMouseDownAsync"
    onmouseup="@OnMouseUpAsync"
    oncopy="@OnCopyAsync"
    @onpastemultimedia="OnPasteAsync">
    <Canvas
        Width="@_width"
        Height="@_height"
        @ref="_canvasReference">
    </Canvas>
    test
</div>

@code {

    private int _width = 1920;
    private int _height = 1080;

    private Context2D _context;
    private Canvas _canvasReference;

    private bool _isMouseDown;
    private bool _isDrawingStated;

    private readonly List<DrawingObject> _drawingObjects = new();
    private Selection? _selection = null;
    private SelectionBox? _selectionBox = null;

    private DrawingObject? _currentDrawingObject;
    private Tool _currentTool;

    private double _globalX = 0;
    private double _globalY = 0;

    private double _mouseX = 0;
    private double _mouseY = 0;

    private double _scale = 1;

    private readonly HashSet<DrawingObject> _buffer = new();
    private (double X, double Y) _bufferPoint = (0, 0);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.GetContext2DAsync();

        if (firstRender)
        {
            await SetDefaultStyleSettings();
            await ClearCanvasAsync();
        }
    }

    /*
     *
     * <img src='data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" height="30" width="200">
     *   <text x="0" y="15" fill="red">⚡</text>
     * </svg>'>
     */

    private async Task OnPasteAsync(PasteMultimediaEventsArgs e)
    {
        if (_buffer.Any())
        {
            var offsetX = _mouseX - _bufferPoint.X;
            var offsetY = _mouseY - _bufferPoint.Y;

            foreach (var drawingObject in _buffer)
            {
                DrawingObject copy = drawingObject switch
                {
                    Diamond diamond => new Diamond(diamond.X1 + offsetX, diamond.Y1 + offsetY),
                    Ellipse ellipse => new Ellipse(ellipse.X1 + offsetX, ellipse.Y1 + offsetY),
                    Freedraw freedraw => new Freedraw(freedraw.Transform.X1 + offsetX, freedraw.Transform.Y1 + offsetY),
                    Image image => new Image(JsInterop, image.GetSource(), image.Transform.X1 + offsetX, image.Transform.Y1 + offsetY, image.Transform.Width, image.Transform.Height),
                    Line line => new Line(line.Transform.X1 + offsetX, line.Transform.Y1 + offsetY),
                    Rectangle rectangle => new Rectangle(rectangle.X1 + offsetX, rectangle.Y1 + offsetY),
                    _ => throw new ArgumentOutOfRangeException(nameof(drawingObject))
                };

                copy.SetEnd(
                    x: drawingObject.Transform.X2 + offsetX,
                    y: drawingObject.Transform.Y2 + offsetY);

                _drawingObjects.Add(copy);

            }
            
            _buffer.Clear();
        }
        
        if (e.IsMultimedia)
        {
            var image = await ClipboardService.GetImage(_mouseX, _mouseY, e.Data);
            await image.DrawAsync(_context);
            _drawingObjects.Add(image);
        }

        await RenderAsync();
    }

    private async Task OnCopyAsync()
    {
        if (_selection?.IsSelected == true)
        {
            var drawingObject = _selection.Get();
            if (drawingObject == null)
            {
                return;
            }

            _buffer.Add(drawingObject);
            _bufferPoint = (_selection.Transform.X1, _selection.Transform.Y1);
        }
        else if (_selectionBox?.IsSelectedAndFinished == true)
        {
            var drawingObjects = _selectionBox.Get();

            foreach (var drawingObject in drawingObjects)
            {
                _buffer.Add(drawingObject);
            }
            
            _bufferPoint = (_selectionBox.Transform.X1, _selectionBox.Transform.Y1);
        }
    }


    private async Task SetDefaultStyleSettings()
    {
        await _context.StrokeStyleAsync("#ffffff");
        await _context.LineWidthAsync(5);
        await _context.LineCapAsync(LineCap.Round);
        await _context.LineJoinAsync(LineJoin.Round);
    }

    private async Task ZoomIn()
    {
        const double step = 1.05;
        _scale *= step;
        await _context.ScaleAsync(step, step);
        await RenderAsync();
    }

    private async Task ZoomOut()
    {
        const double step = 0.95;
        _scale *= step;
        await _context.ScaleAsync(step, step);
        await RenderAsync();
    }

    private async Task ResetZoom()
    {
        _scale = 1;
        _globalY = 0;
        _globalX = 0;

        await _context.SetTransformAsync(
            horizontal_scale: 1,
            vertical_skewing: 0,
            horizontal_skewing: 0,
            vertical_scaling: 1,
            horizontal_translation: 0,
            vertical_translation: 0);
        await RenderAsync();
    }

    private async Task OnMouseDownAsync(MouseEventArgs e)
    {
        _isMouseDown = true;

        if (_currentTool == Tool.Move)
        {
            return;
        }

        var x = (_globalX + e.OffsetX) * (1 / _scale);
        var y = (_globalY + e.OffsetY) * (1 / _scale);

        if (_currentTool == Tool.Selection)
        {
            if (_selectionBox?.IsSelectedAndFinished == true)
            {
                if (_selectionBox?.IsHit(x, y) != false)
                {
                    return;
                }

                await ClearSelection();
            }
            else
            {
                await TryToggleSelection(x, y);
            }

            return;
        }

        DrawingObject currentDrawingObject = _currentTool switch
        {
            Tool.Rectangle => new Rectangle(x, y),
            Tool.Diamond => new Diamond(x, y),
            Tool.Ellipse => new Ellipse(x, y),
            Tool.Line => new Line(x, y),
            Tool.Draw => new Freedraw(x, y),
    // Tool.Image => await ClipboardService.GetImage(x, y),
            _ => throw new ArgumentOutOfRangeException(nameof(_currentTool), _currentTool, null)
            };

        if (currentDrawingObject is Image image)
        {
            await image.DrawAsync(_context);
        }

        _currentDrawingObject = currentDrawingObject;
        _drawingObjects.Add(currentDrawingObject);
    }

    private async Task OnMouseMoveAsync(MouseEventArgs e)
    {
        var x = (_globalX + e.OffsetX) * (1 / _scale);
        var y = (_globalY + e.OffsetY) * (1 / _scale);

        _mouseX = x;
        _mouseY = y;

        if (_isMouseDown && _currentTool == Tool.Move)
        {
            var deltaX = e.MovementX;
            var deltaY = e.MovementY;

            _globalX -= deltaX * (1 / _scale);
            _globalY -= deltaY * (1 / _scale);

            await _context.TranslateAsync(deltaX, deltaY);
        }

        if (_isMouseDown && _currentDrawingObject != null)
        {
            _currentDrawingObject.SetEnd(x, y);
        }

        if (_isMouseDown && _currentTool == Tool.Selection)
        {
            var deltaX = e.MovementX * (1 / _scale);
            var deltaY = e.MovementY * (1 / _scale);

            if (_selectionBox?.IsSelectedAndFinished == true)
            {
                _selectionBox.Move(deltaX, deltaY);
            }
            else if (_selection?.IsSelected == true)
            {
                _selection.Move(deltaX, deltaY);
            }
        }

        await RenderAsync();

        if (_isMouseDown
            && _currentTool == Tool.Selection
            && (_selection == null || _selection?.IsSelected == false)
            && (_selectionBox == null || _selectionBox?.IsSelectedAndFinished == false))
        {
            _selectionBox ??= new SelectionBox(x, y);
            _selectionBox.SetEnd(x, y);

            await _selectionBox.DrawAsync(_context);
            _selectionBox.ToggleSelected(_drawingObjects);
        }
    }

    private Task OnMouseUpAsync(MouseEventArgs e)
    {
        _isMouseDown = false;
        _isDrawingStated = false;
        _currentDrawingObject = null;

        if (_selectionBox?.IsSelected == true)
        {
            _selectionBox?.FinishDrawing();
        }

        if (_selectionBox?.IsSelectedAndFinished == false)
        {
            _selectionBox = null;
        }
        return Task.CompletedTask;
    }

    private async Task RenderAsync()
    {
        await ClearCanvasAsync();

        foreach (var drawingObject in _drawingObjects)
        {
            await drawingObject.DrawAsync(_context);
        }

        if (_selection?.IsSelected == true)
        {
            await _selection.DrawAsync(_context);
        }
        else if (_selectionBox?.IsSelectedAndFinished == true)
        {
            await _selectionBox.DrawAsync(_context);
        }
    }

    private async Task TryToggleSelection(double x, double y)
    {
        var selectedObject = _drawingObjects
            .FirstOrDefault(obj => obj.IsHit(x, y));

        if (selectedObject != null)
        {
            _selection = new Selection(x, y);
            _selection.Set(selectedObject);
            return;
        }

        await ClearSelection();
    }

    private async Task ClearSelection()
    {
        if (_selection?.IsSelected == true)
        {
            _selection.Clear();
            _selection = null;
            await RenderAsync();
        }

        if (_selectionBox?.IsSelectedAndFinished == true)
        {
            _selectionBox.Clear();
            _selectionBox = null;
            await RenderAsync();
        }
    }

    private async Task ClearCanvasAsync()
    {
        await _context.FillStyleAsync("#1e1e1e");
        await _context.FillRectAsync(
            x: _globalX * (1 / _scale),
            y: _globalY * (1 / _scale),
            width: _width * (1 / _scale),
            height: _height * (1 / _scale));
    }

    private async Task ClearAsync()
    {
        await ClearCanvasAsync();
        _drawingObjects.Clear();
    }

    private async Task SelectToolAsync(Tool selectedTool)
    {
        await ClearSelection();
        _currentTool = selectedTool;
    }

}