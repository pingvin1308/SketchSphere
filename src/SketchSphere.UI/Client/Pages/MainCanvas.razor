@page "/maincanvas"
@using Microsoft.AspNetCore.Components
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions

<PageTitle>MainCanvas</PageTitle>

<button onclick="@ClearCanvasAsync">Cleara</button>

<div
    onmousemove="@OnMouseMoveAsync"
    onmousedown="@OnMouseDownAsync"
    onmouseup="@OnMouseUpAsync">
    <BECanvas
        Width="@_width"
        Height="@_height"
        @ref="_canvasReference">
    </BECanvas>
</div>

@code {
    private int _width = 500;
    private int _height = 500;

    private Canvas2DContext _context;
    private BECanvasComponent _canvasReference;

    private bool _isMouseDown;
    private bool _isDrawingStated;

    private List<DrawingObject> _drawingObjects = new();

    private Freedraw? _currentFreedraw;
    private Line? _currentLine;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.CreateCanvas2DAsync();

        if (firstRender)
        {
            await ClearCanvasAsync();
        }

    // await RenderAsync();
    }

    private async Task OnMouseMoveAsync(MouseEventArgs e)
    {
        if (_isMouseDown)
        {
            var x = e.OffsetX;
            var y = e.OffsetY;

            if (!_isDrawingStated)
            {
    // await _context.SetStrokeStyleAsync("#ffffff");
    // await _context.SetLineWidthAsync(3);
    // await _context.SetLineCapAsync(LineCap.Round);
    // await _context.SetLineJoinAsync(LineJoin.Round);
    // _isDrawingStated = true;
    // await _context.BeginPathAsync();
            }

            if (_currentFreedraw != null)
            {
    // await _currentFreedraw.AddPointAsync(_context, x, y);
            }
    // _currentFreedraw?.DrawAsync(_context);

            if (_currentLine != null)
            {
                await ClearCanvasAsync();
                await _currentLine.SetEndAsync(_context, x, y);
            }
        }
    }

    private async Task RenderAsync()
    {
    // await ClearCanvasAsync();

        foreach (var drawingObject in _drawingObjects)
        {
            await drawingObject.DrawAsync(_context);
        }
    }

    private async Task OnMouseDownAsync(MouseEventArgs e)
    {
        Console.WriteLine($"Click - X: {e.OffsetX} Y: {e.OffsetY}");
        var x = e.OffsetX;
        var y = e.OffsetY;
        _isMouseDown = true;

    // _drawingObjects.Add(new Rectangle(x, y));
    // _drawingObjects.Add(new Circle(x + 100, y));
    // _drawingObjects.Add(new Diamond(x, y));
    // _currentFreedraw = new Freedraw(x, y);
    // _drawingObjects.Add(_currentFreedraw);
        _currentLine = new Line(x, y);
        _drawingObjects.Add(_currentLine);
    }

    private async Task OnMouseUpAsync(MouseEventArgs e)
    {
        _isMouseDown = false;
        _isDrawingStated = false;
        _currentFreedraw = null;
    }

    private async Task ClearCanvasAsync()
    {
        await _context.SetFillStyleAsync("#1e1e1e");
        await _context.FillRectAsync(0, 0, _width, _height);
    }

    public sealed class Freedraw : DrawingObject
    {
        private List<(double X, double Y)> _points;

        public Freedraw(double x, double y) : base(x, y)
        {
            _points = new();
            _points.Add((x, y));
        }

        public override async Task DrawAsync(Canvas2DContext context)
        {
            if (_points.Count == 0)
            {
                return;
            }

            await context.MoveToAsync(_points[0].X, _points[0].Y);

            for (var i = 1; i < _points.Count; i++)
            {
                var point = _points[i];
                await context.LineToAsync(point.X, point.Y);
            }

            await context.StrokeAsync();
        }

        public async Task AddPointAsync(Canvas2DContext context, double x, double y)
        {
            if (_points.Count == 1)
            {
                await context.MoveToAsync(_points[0].X, _points[0].Y);
            }

            await context.LineToAsync(x, y);
            await context.StrokeAsync();

            _points.Add((x, y));
        }
    }

    public sealed class Line : DrawingObject
    {
        private double _x2;
        private double _y2;

        public Line(double x, double y) : base(x, y)
        {
        }

        public override Task DrawAsync(Canvas2DContext context)
        {
            throw new NotImplementedException();
        }

        public async Task SetEndAsync(Canvas2DContext context, double x, double y)
        {
            await context.SetStrokeStyleAsync("#ffffff");
            await context.SetLineWidthAsync(3);
            await context.BeginPathAsync();

            await context.MoveToAsync(X, Y);
            await context.LineToAsync(_x2, _y2);
            await context.StrokeAsync();

            _x2 = x;
            _y2 = y;
        }
    }

    public sealed class Rectangle : DrawingObject
    {
        public Rectangle(double x, double y) : base(x, y)
        {
        }

        public override async Task DrawAsync(Canvas2DContext context)
        {
            await context.SetStrokeStyleAsync("#ffffff");
            await context.StrokeRectAsync(X, Y, Width, Height);
        }
    }

    public sealed class Circle : DrawingObject
    {
        public Circle(double x, double y) : base(x, y)
        {
        }

        public override async Task DrawAsync(Canvas2DContext context)
        {
            await context.SetStrokeStyleAsync("#ffffff");
            await context.BeginPathAsync();
            await context.ArcAsync(X, Y, 25, 0, Math.PI * 2);
            await context.StrokeAsync();
        }
    }

    public sealed class Diamond : DrawingObject
    {
        public Diamond(double x, double y) : base(x, y)
        {
        }

        public override async Task DrawAsync(Canvas2DContext context)
        {
            await context.SetStrokeStyleAsync("#ffffff");
            await context.BeginPathAsync();
            await context.MoveToAsync(X - Width / 2, Y);
            await context.LineToAsync(X, Y - Height / 2);
            await context.LineToAsync(X + Width / 2, Y);
            await context.LineToAsync(X, Y + Height / 2);
            await context.LineToAsync(X - Width / 2, Y);
            await context.StrokeAsync();
        }
    }

    public abstract class DrawingObject
    {
        protected DrawingObject(double x, double y)
        {
            X = x;
            Y = y;
        }

        protected double X { get; }
        protected double Y { get; }

        protected int Width => 50;
        protected int Height => 50;

        public abstract Task DrawAsync(Canvas2DContext context);
    }

}